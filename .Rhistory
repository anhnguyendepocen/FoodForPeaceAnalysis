e1 <- as.rv(e1)
e2 <- as.rv(e2)
# Use outer to generate all pairwise combinations, combining using fun
vals <- outer(e1, e2, fun)
# Probabilities get multipled together
probs <- outer(probs(e1), probs(e2), "*")
# Rely on rv to collapse any duplicates
rv(as.vector(vals), as.vector(probs))
}
"+.rv" <-   function(e1, e2) combine(e1, e2, `+`)
"-.rv" <-   function(e1, e2) combine(e1, e2, `-`)
"/.rv" <-   function(e1, e2) combine(e1, e2, `/`)
# OR
Ops.rv <- function(e1, e2) combine(e1, e2, .Generic)
print.rv <- function(x, ...) {
cat("THIS IS MY METHOD\n")
}
dice <- rv(1:6)
dice
?cat()
dice
dice <- rv(1:6)
print.rv <- function(x, ...) {
cat("THIS IS MY METHOD\n")
print("or this")
}
dice <- rv(1:6)
dice
plot.rv <- function(x, ...) {
name <- deparse(substitute(x))
ylim <- range(0, probs(x))
plot(as.numeric(x), probs(x), type = "h", ylim = ylim,
xlab = name, ylab = paste0("P(", name, ")"), ...)
points(as.numeric(x), probs(x), pch = 20)
abline(h = 0, col = "gray")
}
dice
plot.rv(dice)
plot.rv(dice)
rrev.default(
)
rrev.default
rev.default
library(dplyr)
dplyr
?dlpyr
?dplyr
install.packages("dplyr")
library(dplry)
library("dplyr", lib.loc="~/R/win-library/3.1")
dlpry?
?dplyr()
help(dplyr)
vignette()
library("dplyr", lib.loc="~/R/win-library/3.1")
help(dlpyr)
vignette()
browseVignettes()
library(dplyr)
set.seed(2014)
centers <- data.frame(cluster=factor(1:3), size=c(100, 150, 50), x1=c(5, 0, -3), x2=c(-1, 1, -2))
points <- centers %>% group_by(cluster) %>%
do(data.frame(x1=rnorm(.$size[1], .$x1[1]),
x2=rnorm(.$size[1], .$x2[1])))
library(ggplot2)
ggplot(points, aes(x1, x2, color=cluster)) + geom_point()
install.packages("xtboost")
system.file(package =
"devtools")
system.file(package ="devtools")
install.packages("devtools")
system.file(package =
"devtools")
install.packages(c("devtools", "roxygen2", "testthat", "pryr",
"microbenchmark"))
devtools::dr_devtools()
install.packages("installr") # install
setInternet2(TRUE) # saves some troubles
installr::updateR() # updating R.
install.packages("devtools")
install.packages(c("devtools", "roxygen2", "testthat", "pryr",
"microbenchmark"))
devtools::dr_devtools()
find_rtools()
find_rtools()
devtools::dr_devtools()
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
devtools::dr_devtools()
library(rattle)
install.package("rattle")
install.packages("rattle")
library(rattle)
rattle()
---
title: "StataTraining"
author: "Tim Essam"
date: "December 15, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata14/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
---
title: "StataTraining"
author: "Tim Essam"
date: "December 15, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata14/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
---
title: "StataTraining"
author: "Tim Essam"
date: "December 15, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata14/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
---
title: "StataTraining"
author: "Tim Essam"
date: "December 15, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata14/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
install.packages("formattable")
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = color_bar("pink", 0.2),
test2_score = color_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = color_bar("pink", 0.2),
test2_score = color_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formatable)
library(formattable)
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = color_bar("pink", 0.2),
test2_score = color_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
devtools::install_github("renkun-ken/formattable")
install.packages("praise")
library(praise)
names(praise)
install.packages("tidyr")
install.packages("gapminder")
library(dplyr)
library(gapminder)
library(ggplot2)
ggplot(gapminder, aes(year, lifeExp)) + geom_line(eas(group = country))
ggplot(gapminder, aes(year, lifeExp)) + geom_line(aes(group = country))
by_country <- gapminder %>% group_by(continent, country) %>% nest()
library(devtools)
library("devtools")
install.packages("devtools")
devtools::install_github("hadley/tidyr")
library(tidyr)
by_country <- gapminder %>% group_by(continent, country) %>% nest()
View(by_country)
library(tidyr)
library(dplyr)
library(gapminder)
library(ggplot)
ggplot(gapminder, aes(year, lifeExp)) +
geom_line(aes(group = country))
library(ggplot2)
ggplot(gapminder, aes(year, lifeExp)) +
geom_line(aes(group = country))
by_country <- gapminder %>%
group_by(continent, country) %>%
nest()
by_country$data[[1]]
by_country <- by_country %>%
mutate(model = purrr::map(data, ~ lm(lifeExp ~ year, data = .))
)
intall.packages("purrr")
install.packages("purrr")
by_country <- by_country %>%
mutate(model = purrr::map(data, ~ lm(lifeExp ~ year, data = .))
)
by_country %>% unnest(data)
by_country %>% unnest(model %>% purrr::map(broom::glance))
library(broom)
by_country %>% unnest(model %>% purrr::map(broom::tidy))
by_country %>% unnest(model %>% purrr::map(broom::augment))
install.packages("devtools")
library(devtools)
devtools::install_github("flaneuese/llamar")
devtools::install_github("flaneuse/llamar")
library(llamar)
dir()
setwd("~/")
dir()
fc = readr::read_tsv(file = '~/GitHub/FoodCourt/data/foodcourt.tsv',
col_types = 'icciiciicc')
install.packages("readr")
fc = readr::read_tsv(file = '~/GitHub/FoodCourt/data/foodcourt.tsv',
col_types = 'icciiciicc')
View(fc)
colnames(fc)[8] = 'Month_num'
# Convert times from strings to times using lubridate
fc = fc %>%
mutate(Date = mdy(Date),
time = hm(Time))
fc = separate(fc, Time, into = c('hr', 'min'), sep = 2) %>%
mutate(hr = as.numeric(str_replace(hr, ':', '')),
min = as.numeric(str_replace(min, ':', '')))
# Reorder the days of the week.
fc$day = factor(fc$day, rev(c('Sunday', 'Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday')))
fc = readr::read_tsv(file = '~/GitHub/FoodCourt/data/foodcourt.tsv',
col_types = 'icciiciicc')
# Remove duplicate month column name.
colnames(fc)[8] = 'Month_num'
# Convert times from strings to times using lubridate
fc = fc %>%
mutate(Date = mdy(Date),
time = hm(Time))
fc = separate(fc, Time, into = c('hr', 'min'), sep = 2) %>%
mutate(hr = as.numeric(str_replace(hr, ':', '')),
min = as.numeric(str_replace(min, ':', '')))
# Reorder the days of the week.
fc$day = factor(fc$day, rev(c('Sunday', 'Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday')))
library(dplyr)
library(tidyr)
library(lubridate)
library(ggvis)
library(ggplot2)
library(stringr)
library(readr)
library(RColorBrewer)
fc = readr::read_tsv(file = '~/GitHub/FoodCourt/data/foodcourt.tsv',
col_types = 'icciiciicc')
# Remove duplicate month column name.
colnames(fc)[8] = 'Month_num'
# Convert times from strings to times using lubridate
fc = fc %>%
mutate(Date = mdy(Date),
time = hm(Time))
fc = separate(fc, Time, into = c('hr', 'min'), sep = 2) %>%
mutate(hr = as.numeric(str_replace(hr, ':', '')),
min = as.numeric(str_replace(min, ':', '')))
# Reorder the days of the week.
fc$day = factor(fc$day, rev(c('Sunday', 'Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday')))
View(fc)
fcDate = fc %>%
group_by(Day) %>%
summarise(avg = mean(Visitors),
tot = sum(Visitors),
std = sd(Visitors),
num = n())
View(fcDate)
names(fc)
View(fc)
fcDate = fc %>%
group_by(Date) %>%
summarise(avg = mean(Visitors),
tot = sum(Visitors),
std = sd(Visitors),
num = n())
View(fcDate)
write.csv("fc_date.csv", fcDate)
?(write.csv)
help("write.csv")
write.csv(fcDate, "fc_date.csv")
View(fcDate)
date_seq = seq(as.Date("2014-01-01"), as.Date("2015-07-30"), "days")
dateSeq <- as.dataframe(date_seq)
dateSeq <- as.data.frame(date_seq)
View(fcDate)
View(dateSeq)
View(fcDate)
dateSeq <- as.data.frame(seq(as.Date("2014-01-01"), as.Date("2015-07-30"), "days"))
View(dateSeq)
ds_tmp <- seq(as.Date("2014-01-01"), as.Date("2015-07-30"), "days"))
dataSeq <- as.data.frame(ds_tmp)
dstmp <- seq(as.Date("2014-01-01"), as.Date("2015-07-30"), "days")
dataSeq <- as.data.frame(ds_tmp)
dataSeq <- as.data.frame(dstmp)
View(dataSeq)
View(fc)
rename(dateSeq, dstmp = Date)
dstmp <- seq(as.Date("2014-01-01"), as.Date("2015-07-30"), "days")
dateSeq <- as.data.frame(dstmp)
rename(dateSeq, dstmp = Date)
names(dateSeq)
dplyr::rename(dateSeq, dstmp = Date)
dplyr::rename(dateSeq, Date = dstmp)
View(dateSeq)
names(dateSeq)
dateSeq <- rename(dateSeq, Date = dstmp)
fc_full <- full_join(dateSeq, fc, by = Date)
fc_full <- full_join(dateSeq, fc, by = "Date")
str(dateSeq)
str(fc)
as.Date(as.POSIXct(fc$Date, 'GMT'))
fc$Date <- as.Date(as.POSIXct(fc$Date, 'GMT'))
str(fc)
str(dateSeq)
fc_full <- full_join(dateSeq, fc, by = "Date")
View(fc_full)
write.csv(fc_full, "fc_date.csv")
dir()
getwd()
fc_full <- right_join(dateSeq, fc, by = "Date")
dim(fc_full)
write.csv(fc_full, "fc_date.csv")
write.csv(fc_full, "~/GitHub/FoodCourt/data/fc_date.csv")
View(fcDate)
fc$Date <- as.Date(as.POSIXct(fcDate$Date, 'GMT'))
fcDate$Date <- as.Date(as.POSIXct(fcDate$Date, 'GMT'))
fc_full <- right_join(d, fcDate, by = "Date")
fc_full <- right_join(dateSeq, fcDate, by = "Date")
dim(fc_full)
fc_full <- left_join(dateSeq, fcDate, by = "Date")
View(fc_full)
write.csv(fc_full, "~/GitHub/FoodCourt/data/fc_date.csv")
library(dplyr)
library(tidyr)
library(lubridate)
library(ggvis)
library(ggplot2)
library(stringr)
library(readr)
library(RColorBrewer)
fc = readr::read_tsv(file = '~/GitHub/FoodCourt/data/foodcourt.tsv',
col_types = 'icciiciicc')
# Remove duplicate month column name.
colnames(fc)[8] = 'Month_num'
# Convert times from strings to times using lubridate
fc = fc %>%
mutate(Date = mdy(Date),
time = hm(Time))
fc = separate(fc, Time, into = c('hr', 'min'), sep = 2) %>%
mutate(hr = as.numeric(str_replace(hr, ':', '')),
min = as.numeric(str_replace(min, ':', '')))
# Reorder the days of the week.
fc$day = factor(fc$day, rev(c('Sunday', 'Monday', 'Tuesday', 'Wednesday',
'Thursday', 'Friday', 'Saturday')))
# Aggregate up
# By date
fcDate = fc %>%
group_by(Date) %>%
summarise(avg = mean(Visitors),
tot = sum(Visitors),
std = sd(Visitors),
num = n())
# Add in a full sequence of dates
dstmp <- seq(as.Date("2014-01-01"), as.Date("2015-07-30"), "days")
dateSeq <- as.data.frame(dstmp)
dateSeq <- rename(dateSeq, Date = dstmp)
fcDate$Date <- as.Date(as.POSIXct(fcDate$Date, 'GMT'))
fc_full <- left_join(dateSeq, fcDate, by = "Date")
# Export date to a .csv
write.csv(fc_full, "~/GitHub/FoodCourt/data/fc_date.csv")
fc$Date <- as.Date(as.POSIXct(fc$Date, 'GMT'))
fc_all <- full_jon(dataSeq, fc, by = "Date")
fc_all <- full_join(dataSeq, fc, by = "Date")
str(fc$Date)
fc_all <- full_join(dateSeq, fc, by = "Date")
write.csv(fc_ll, "~/Github/FoodCourt/data/fc_all.csv")
write.csv(fc_all, "~/Github/FoodCourt/data/fc_all.csv")
View(fc_all)
fc_all$weekday <- weekdays(as.Date(fc_all$Date,'%d-%m-%Y'))
View(fc_all)
View(fc_all)
write.csv(fc_all, "~/Github/FoodCourt/data/fc_all.csv")
View(fc_all)
fc_all$month <- month(as.Date(fc_all$Date, label = TRUE))
View(fc_all)
fc_all$month <- month((fc_all$Date, label = TRUE))
fc_all$month <- month(fc_all$Date, label = TRUE)
View(fc_all)
write.csv(fc_all, "~/Github/FoodCourt/data/fc_all.csv")
View(fc_all)
library(animation) # We need the excellent animation package
library(ggplot2    # And ggplot2
library(animation)
library(ggplot2)
install.packages("tidyr")
library(tidyr)
df = data_frame(x = 1:2, y = c("a,b", "d, e, f"))
library(dplyr)
df = data_frame(x = 1:2, y = c("a,b", "d, e, f"))
View(df)
separate_rows(y, sep = ",")
df %>% separate_rows(y, sep = ",")
read.clipboard()
read.clipboard(header=TRUE)
read.clipboard(header=TREU)
read.clipboard(header=TRUE)
df <- readClipboard()
df <- readClipboard(format = 1)
df <- as.data.frame(readClipboard(format = 1))
View(df)
# Plotting FFP data
# Import/Load packages ----------------------------------------------------
library(data.table)  # faster fread() and better weekdays()
library(dplyr)       # consistent data.frame operations
library(purrr)       # consistent & safe list/vector munging
library(tidyr)       # consistent data.frame cleaning
library(lubridate)   # date manipulation
library(ggplot2)     # base plots are for Coursera professors
library(scales)      # pairs nicely with ggplot2 for plot label formatting
library(gridExtra)   # a helper for arranging individual ggplot objects
library(ggthemes)    # has a clean theme for ggplot2
library(viridis)     # best. color. palette. evar.
library(knitr)       # kable : prettier data.frame output
library(haven)       # read in stata data (.dta)
library(cowplot)     # combine ggplots into a single graphic
library(extrafont)
# import fonts for segoe ui
font_import(pattern="[S/s]egoe")
# Pull in data from stata file
setwd("~/GitHub/FoodForPeaceAnalysis")
d <- read_dta("Dataout/ffp_procurement.dta")
# Create a basic heatmap of the frequency of purchase by the categories; Need to manipulate the dates a bit
d <- group_by(d, category) %>% mutate(totCount = n())
d <- group_by(d, moYear) %>% mutate(monthlyCount = n())
d$category <- as.factor(d$category)
d$category <- factor(d$category, levels = d$category[order(d$totCount)])
d$sortValue <- d$category
d$sortValue <- factor(d$sortValue, levels = d$sortValue[order(d$totCatValue)])
d_freq = d %>% group_by(category, moYear, totCount, monthlyCount, sortValue) %>%
summarise(count = n(), value = sum(povalue)/1000000, mean_value = mean(po_unitcost)) %>%
arrange(category, -count)
# Order the commodities by total count variable for graphing
key.events <- data.frame(date=as.Date(c("2011-10-15","2012-10-15","2013-10-15",
"2014-10-15", "2015-10-15", "2016-10-15")))
install.packages("heatmap.2")
install.packages("heatmap3")
library(heatmap3)
?heatmap3()
View(d_freq)
d_spread <- spread(category, count)
?spread()
d_spread <- spread(category, count)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
View(stocks)
stocksm <- stocks %>% gather(stock, price, -time)
View(stocksm)
stocksm %>% spread(stock, price)
View(stocks)
d_spread <- d_freq  %>% spread(category, count)
View(d_spread)
