scale_color_gradient() +
theme_bw()
last_plot()
a + geom_area(stat = "bin")
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") + coord_cartesian() +
scale_color_gradient() +
theme_bw()
# Going through column one
a <- ggplot(mpg, aes(hwy))
a + geom_area(stat = "bin")
a + geom_density(kernel = "gaussian")
a + geom_dotplot()
a + geom_dotplot(color = cyl)
a + geom_dotplot(aes(color = cyl))
a + geom_dotplot(fill = "gray")
a + geom_dotplot(fill = "brown")
a + geom_dotplot(fill = "red")
a + geom_dotplot(fill = "red") + theme_bw
a + geom_dotplot(fill = "red") + theme_bw()
b <- ggplot(mpg, aes(fl))
b + geom_bar()
c + geom_polygon(aes(group = group))
c <- ggplot(map, aes(long, lat))
c + geom_polygon(aes(group = group))
c + geom_polygon(aes(group = group))
c <- ggplot(map, aes(long, lat))
data(map)
data("economics")
b + geom_bar() + geom_rug(sides = "brown")
a + geom_dotplot(fill = "red") + theme_bw() + geom_rug(sides = "brown")
f <- ggplot(mpg, aes(cty, hwy))
f + stat_bin2d(bins = 30, drop = TRUE)
install.packages("flexdashboard", type = "source")
data("iris")
head(iris)
str(iris)
library("dplyr")
glimpse(iris)
str(iris)
summary(iris)
class(iris)
class(iris$Sepal.Length)
sapply(iris, class)
?(sapply)
f = factor(c("a", "b", "a", "a", "c"))
levels(f)
gender = c(2, 1, 1, 2, 0, 1, 1)
gender = c(2, 1, 1, 2, 0, 1, 1)
recode = c(male = 1, female = 2)
gender = factor(gender, levels = recode, labels = names(recode))
levels(gender)
factor(gender)
gender = relevel(gender, ref = "female")
levels(gender)
attr(gender)
age = c(27, 52, 65, 34, 89, 45, 68)
factor(age)
factor(gender)
gender = reorder(gender, age)
(gender = reorder(gender, age))
(gender = factor(gender, levels = recode, labels = names(recode)))
gender = c(2, 1, 1, 2, 0, 1, 1)
recode = c(male = 1, female = 2)
(gender = factor(gender, levels = recode, labels = names(recode)))
age = c(27, 52, 65, 34, 89, 45, 68)
(gender = reorder(gender, age))
attr(, "Scores")
attr(, "scores")
gender = relevel(gender, ref = "female")
age = c(27, 52, 65, 34, 89, 45, 68)
(gender = reorder(gender, age))
attr(, "scores")
attr(iris, "dim")
attributes(iris)
person
iris
complete.cases(iris)
sum(complete.cases(iris))
sum(complete.cases(mtcars))
attributes(mtcars)
dim(mtcars)
dim(iris)
c = c(1:10, 20, 30)
boxplot.stats(c)$out
boxplot.stats(c)
boxplot.stats(c)out
boxplot.stats(c)$out
summary(c)
histogram(c)
hist(c)
library("editrules")
install.packages("editrules")
library(editrules)
install.packages("deducorrect")
library(purrr)
library(devtools)
devtools::install_github("hadley/purrr")
devtools::install_github("hadley/purrr")
getwd()
setwd("../Github/FoodForPeaceAnalysis/Datain")
setwd("/Github/FoodForPeaceAnalysis/Datain")
setwd("..Documents/Github/FoodForPeaceAnalysis/Datain")
setwd("~/Github/FoodForPeaceAnalysis/Datain")
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
#=============================================================================================================#
# Script created by Tim Essam @ USAID GeoCenter
# Script created in version R 3.3.0
# This script is for analyzing Food for Peace Procurement Data
#=============================================================================================================#
# Import/Load packages ----------------------------------------------------
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr', 'lubridate',
'kable', 'xtable', 'scales', 'zoo', 'knitr')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
setwd("~/Github/FoodForPeaceAnalysis/Datain")
dir()
read_excel(ffp_procurement.xlsx)
read_excel("ffp_procurement.xlsx")
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
View(df)
xtable(df$Material)
install.packages("xtable")
table(df$Material)
kable(table(df$Material), format = "markdown", padding = 0)
library(kntir)
library(knitr)
kable(table(df$Material), format = "markdown", padding = 0)
kable(table(df$Material), format = "markdown")
kable(table(df$Material))
# Summary table of materials
mat_df <- df %>% group_by(Material) %>%
summarise(n = n()) %>%
arrange(Material)
kable(mat_df)
mat_df <- df %>% group_by(Material) %>%
summarise(n = n()) %>%
arrange(n)
kable(mat_df)
mat_df <- df %>% group_by(Material) %>%
summarise(n = n()) %>%
arrange(-n)
kable(mat_df)
names(df)
mat_df2 <- df %>% group_by(Material) %>%
summarise(n = n(), value = sum(PO Value)) %>%
arrange(-n)
kable(mat_df)
mat_df2 <- df %>% group_by(Material) %>%
summarise(n = n(), value = sum(PO Value)) %>%
arrange(-n)
kable(mat_df2)
mat_df2 <- df %>% group_by(Material) %>%
summarise(n = n(), totValue = sum(`PO Value`)) %>%
arrange(-n)
kable(mat_df2)
mat_df2 <- df %>% group_by(Material) %>%
summarise(n = n(), totValue = sum(`PO Value`), totMin = min(`PO Value`), totMax = max(`PO Value`)) %>%
arrange(-n)
kable(mat_df2)
#=============================================================================================================#
# Script created by Tim Essam @ USAID GeoCenter
# Script created in version R 3.3.0
# This script is for analyzing Food for Peace Procurement Data
#=============================================================================================================#
# Import/Load packages ----------------------------------------------------
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr',
'lubridate','xtable', 'scales', 'zoo', 'knitr', 'formattable')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
setwd("~/Github/FoodForPeaceAnalysis/Datain")
# Read in food for peace procurement data
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
# Summary table of materials
mat_df <- df %>% group_by(Material) %>%
summarise(n = n()) %>%
arrange(-n)
kable(mat_df)
# Summary table of types of commodities in major groups
mat_df2 <- df %>% group_by(Material) %>%
summarise(n = n(), totValue = sum(`PO Value`), totMin = min(`PO Value`), totMax = max(`PO Value`)) %>%
arrange(-n)
kable(mat_df2)
devtools::install_github("renkun-ken/formattable")
mat_df2 <- df %>% group_by(Material) %>%
summarise(n = n(), totValue = sum(`PO Value`), totMin = min(`PO Value`), totMax = max(`PO Value`)) %>%
arrange(-n)
kable(mat_df2)
library(formattable)
formattable(mat_df2, list(
totValue = color_tile("white", "red")))
mat_df2 <- df %>% group_by(Material) %>%
summarise(n = n(), totValue = sum(`PO Value`)/1000000, totMin = min(`PO Value`), totMax = max(`PO Value`)) %>%
arrange(-totValue, -n)
kable(mat_df2)
formattable(mat_df2, list(
totValue = color_tile("white", "red")))
formattable(mat_df2, list(
totValue = = normalize_bar("pink", 0.2)))
formattable(mat_df2, list(
totValue =  normalize_bar("pink", 0.2)))
names(df)
mat_df2 <- df %>% group_by(Material, `Recipient Country` ) %>%
summarise(n = n(), totValue = sum(`PO Value`)/1000000, totMin = min(`PO Value`), totMax = max(`PO Value`)) %>%
arrange(-totValue, -n)
kable(mat_df2)
formattable(mat_df2, list(
totValue =  normalize_bar("pink", 0.2)))
mat_df2 <- df %>% group_by(Material, `Recipient Country` ) %>%
summarise(n = n(), totValue = sum(`PO Value`)/1000000, totMin = min(`PO Value`), totMax = max(`PO Value`)) %>%
arrange(-Recipient Country, -totValue, -n)
kable(mat_df2)
mat_df2 <- df %>% group_by(Material, `Recipient Country` ) %>%
summarise(n = n(), totValue = sum(`PO Value`)/1000000, totMin = min(`PO Value`), totMax = max(`PO Value`)) %>%
arrange(-totValue, -n, Recipient Country)
kable(mat_df2)
formattable(mat_df2, list(
totValue =  normalize_bar("pink", 0.1)))
mat_df2 <- df %>% group_by(Material, `Recipient Country`, `Fiscal Year` ) %>%
summarise(n = n(), totValue = sum(`PO Value`)/1000000, totMin = min(`PO Value`), totMax = max(`PO Value`)) %>%
arrange(-totValue, -n, Recipient Country)
kable(mat_df2)
formattable(mat_df2, list(
totValue =  normalize_bar("pink", 0.1)))
names(df)
country_df <- df %>% group_by(`Recipient Country`, `Fiscal Year`) %>%
summarise(totValue = sum(`PO Value`), n = n()) %>%
arrange(-totValue)
kable(country_df)
ggplot(country_df, aes(x = `Fiscal Year`, y = totValue)) + geom_bar()
ggplot(country_df, aes(totValue)) + geom_bar()
ggplot(country_df, aes(year, totValue)) + geom_bar(stat = "identity")
ggplot(country_df, aes(`Fiscal Year`, totValue)) + geom_bar(stat = "identity")
ggplot(country_df, aes(`Fiscal Year`, totValue)) + geom_bar(stat = "identity") + facet_wrap(~`Recipient Country`)
ggplot(country_df, aes(`Fiscal Year`, totValue)) + geom_bar(stat = "identity") +
facet_wrap(~`Recipient Country`) + theme_bw()
names(Df)
names(df)
head(df)
month(dmy(df$Month))
month(dmy(df$`PO Date`))
ggplot(df, aes(`Fiscal Year`, `PO Value`)) + geom_bar(stat = "identity") +
facet_wrap(~`Recipient Country`) + theme_bw()
ggplot(df, aes(`Fiscal Year`, totValue)) + geom_bar(stat = "identity") +
facet_wrap(~`Recipient Country`) + theme_bw()
ggplot(country_df, aes(`Fiscal Year`, totValue)) + geom_bar(stat = "identity") +
facet_wrap(~`Recipient Country`) + theme_bw()
country_df <- df %>% group_by(`Recipient Country`, `Fiscal Year`) %>%
summarise(totValue = sum(`PO Value`)/1000000, n = n()) %>%
arrange(-totValue)
kable(country_df)
ggplot(country_df, aes(`Fiscal Year`, totValue)) + geom_bar(stat = "identity") +
facet_wrap(~`Recipient Country`) + theme_bw()
names(df)
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Receipient Country`, dest = `Ship to`,
ip = `Sold to Party`)
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`)
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`, commodity = Material,
prog = Program)
setwd("~/Github/FoodForPeaceAnalysis/Datain")
# Read in food for peace procurement data
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`, commodity = Material,
prog = Program)
mat_df <- df %>% group_by(commodity) %>%
summarise(n = n()) %>%
arrange(-n)
kable(mat_df)
mat_df <- df %>% group_by(commodity) %>%
summarise(n = n(), totValue = sum(value)) %>%
arrange(-n)
kable(mat_df)
kable(head(iris), format = "html", caption = "Title of the table")
kable(head(iris), format = "html")
kable(head(iris))
kable(head(iris), format = "html")
kable(head(mtcars), format = "rst")
kable(head(mtcars), format = "markdown", padding = 0)
str(mtcars)
x = as.data.frame(matrix(rnorm(60, 1e+06, 10000), 10))
kable(x, format.args = list(decimal.mark = ",", big.mark = "'"))
kable(mat_df, format.args = list(decimal.mark = ".")
kable(mat_df, format.args = list(decimal.mark = "."))
kable(mat_df, digits=2)
kable(mat_df, digits=0)
mat_df <- df %>% group_by(commodity) %>%
summarise(n = n(), totValue = sum(value)) %>%
arrange(-totValue, -n)
kable(mat_df, digits=0)
formattable(mat_df2, list(
totValue =  normalize_bar("pink", 0.1)))
formattable(mat_df, list(
totValue =  normalize_bar("pink", 0.1)))
mat_df <- df %>% group_by(commodity) %>%
summarise(count = n(), totValue = sum(value)) %>%
arrange(-totValue, -count)
kable(mat_df, digits=0)
formattable(mat_df, list(
totValue =  normalize_bar("pink", 0.1)),
count = color_tile("white", "orange"))
formattable(mat_df, list(
totValue =  normalize_bar("pink", 0.1),
count = color_tile("white", "orange")))
mat_df2 <- df %>% group_by(commodity, country)%>%
summarise(count = n(), totValue = sum(value)/1000000, totMin = min(value), totMax = max(value)) %>%
arrange(-totValue, -country, country)
kable(mat_df2)
kable(mat_df2, digits = 0)
mat_df2 <- df %>% group_by(commodity, country)%>%
summarise(count = n(), totValue = sum(value)/1000000, totMin = min(value), totMax = max(value)) %>%
arrange(totValue, -country, country)
kable(mat_df2, digits = 0)
mat_df2 <- df %>% group_by(commodity, country)%>%
summarise(count = n(), totValue = sum(value)/1000000, totMin = min(value), totMax = max(value)) %>%
arrange(totValue, -count, country)
kable(mat_df2, digits = 0)
mat_df2 <- df %>% group_by(commodity, country)%>%
summarise(count = n(), totValue = sum(value)/1000000, totMin = min(value), totMax = max(value)) %>%
arrange(-totValue, -count, country)
kable(mat_df2, digits = 0)
formattable(mat_df2, list(
totValue =  normalize_bar("pink", 0.1)))
mat_df2 <- df %>% group_by(commodity, country)%>%
summarise(count = n(), totValue = sum(value)/1000000, totMin = min(value), totMax = max(value)) %>%
arrange(-totValue, -count)
kable(mat_df2, digits = 0)
mat_df2 <- df %>% group_by(commodity, country)%>%
summarise(count = n(), totValue = sum(value), totMin = min(value), totMax = max(value)) %>%
arrange(-totValue, -count)
kable(mat_df2, digits = 0)
formattable(mat_df2, list(
totValue =  normalize_bar("pink", 0.1)))
formattable(mat_df2, list(
totValue =  normalize_bar("pink", 0.4)))
kable(mat_df2, digits = 0)
kable( formatC(mat_df2, format="d", big.mark=','), digits = 0)
?formatC
kable(matdf_2, digits = 0)
mat_df2 <- df %>% group_by(commodity, country)%>%
summarise(count = n(), totValue = sum(value), totMin = min(value), totMax = max(value)) %>%
arrange(-totValue, -count)
kable(mat_df2, digits = 0)
kable(mat_df2, format.args = list(decimal.mark = ",", big.mark = "'"), digits = 0)
kable(mat_df2, format.args = list(decimal.mark = ","), digits = 0)
kable(mat_df2, format.args = list(decimal.mark = ",", big.mark = ","), digits = 0)
kable(mat_df2, format.args = list(big.mark = ","), digits = 0)
formattable(mat_df2, list(
totValue =  normalize_bar("green", 0.4)))
country_df <- df %>% group_by(`country`, `FY`) %>%
summarise(totValue = sum(`value`)/1000000, n = n()) %>%
arrange(-totValue)
kable(country_df)
kable(country_df, digits = 0)
country_df$country <-factor(country_df$country, levels=country[order(country_df$totValue)
)
country_df$country <-factor(country_df$country, levels=country[order(country_df$totValue)])
country_df$country <-factor(df$country, levels=country_df[order(country_df$totValue)])
country_df$country <-factor(df$country_df, levels=country_df[order(country_df$totValue)])
country_df$corder <-factor(df$country_df, levels=country_df[order(country_df$totValue)])
country_df$oCountry <-factor(df$country, levels=country_df[order(country_df$totValue)])
country_df$oCountry <-factor(country_df$country, levels=country_df[order(country_df$totValue)])
ggplot(country_df, aes(FY, totValue)) + geom_bar(stat = "identity") +
facet_wrap(~oCountry) + theme_bw()
ggplot(country_df, aes(FY, totValue)) + geom_bar(stat = "identity") +
facet_wrap(~oCountry,) + theme_bw()
ggplot(country_df, aes(FY, totValue)) + geom_bar(stat = "identity") +
facet_wrap(~country,) + theme_bw()
country_df$country <- factor(df_country$country, levels = order(country_df$totValue))
country_df <- df %>% group_by(`country`, `FY`) %>%
summarise(totValue = sum(`value`)/1000000, n = n()) %>%
arrange(-totValue)
kable(country_df, digits = 0)
country_df$country <- factor(country_df$country, levels = order(country_df$totValue))
ggplot(country_df, aes(FY, totValue)) + geom_bar(stat = "identity") +
facet_wrap(~country,) + theme_bw()
str(country_df$country
)
country_df$country <- factor(country_df$country, levels = ordercountry_df$totValue)
install_github("plotflow", "trinker")
devtools::install_github("plotflow", "trinker")
install.packages("plyr")
install.packages("plyr")
#=============================================================================================================#
# Script created by Tim Essam @ USAID GeoCenter
# Script created in version R 3.3.0
# This script is for analyzing Food for Peace Procurement Data
#=============================================================================================================#
# Import/Load packages ----------------------------------------------------
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr',
'lubridate','xtable', 'scales', 'zoo', 'knitr', 'formattable', 'plotflow')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
setwd("~/Github/FoodForPeaceAnalysis/Datain")
# Read in food for peace procurement data
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`, commodity = Material,
prog = Program)
library(plotflow)
#=============================================================================================================#
# Script created by Tim Essam @ USAID GeoCenter
# Script created in version R 3.3.0
# This script is for analyzing Food for Peace Procurement Data
#=============================================================================================================#
# Import/Load packages ----------------------------------------------------
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr',
'lubridate','xtable', 'scales', 'zoo', 'knitr', 'formattable')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
setwd("~/Github/FoodForPeaceAnalysis/Datain")
# Read in food for peace procurement data
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`, commodity = Material,
prog = Program)
install.packages("stringr")
#=============================================================================================================#
# Script created by Tim Essam @ USAID GeoCenter
# Script created in version R 3.3.0
# This script is for analyzing Food for Peace Procurement Data
#=============================================================================================================#
# Import/Load packages ----------------------------------------------------
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr',
'lubridate','xtable', 'scales', 'zoo', 'knitr', 'formattable')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
setwd("~/Github/FoodForPeaceAnalysis/Datain")
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`, commodity = Material,
prog = Program)
install.packages(c("geosphere", "httr", "openssl", "quantreg", "raster", "tidyr", "withr"))
