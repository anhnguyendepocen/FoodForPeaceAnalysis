head(deal(d))
head(deal(d))
shuffle <- function(cards){
random <- sample(1:52, size = 52)
cards[random, ]
}
deak(d)
deal(d)
head(deal(d))
deck2 <- shuffle(d)
head(deal(deck2))
head(deal(deck2))
head(deal(deck2))
d$value
mean(d$value)
median(d$value)
deck2 <- d
deck2$new <- 1:52
x <- c(F, T, F)
sum(x)
as.numeric(x)
mean(x)
x <- list(1:3, "A", c(T, F, T), c(2.9, 5.9))
x
str(x)
x <- list(list(list(list())))
x
str(x)
is.recursive(x)
?is.recursive()
x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))
str(X)
x
str(X)
str(x)
str(y)
typeof(y)
is.list(mtcars)
md <- lm(mpg ~ wt, data = mtcars)
is.list(md)
md
c(1, f)
c(1, F)
c("a", 1)
c(list(1), "a")
str(c(list(1), "a"))
c(T, 1L)
search
list
list()
ls()
md
x
unlist(x)
unlist(x)[1]
unlist(x)[2]
unlist(x)[4]
x
str(x)
c(F, NA_character_)
y <- 1:10
attr(y, "my_attribute") <-"This is a vector"
attr(y, "my_attribute")
attributes(y)
str(attributes(y))
structure(1:10, my_attribute = "This is a vector")
attributes(y[1])
names(y)
dim(y)
y
class(y)
attr(y, "dim")
dim(y)
ls()
x <- c(a = 1, b = 2, c = 3)
x
x <- 1:3; names(x) <- c("a", "b", "c")
x
x <- factor(c("a", "b", "c", "d"))
x
class(x)
levels(x)
x[2] <- "e"
sex_char <- c("m")
sex_char <- c("m", "m", "m")
sex_char
sex_char <- factor(sex_char, levels = c("m", "f"))
sex_char
table(sex_char)
table(sex_factor)
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_factor)
?structure()
structure(1:6, dim = 2:3)
?comment()
help(rev)
x <- c(1:5, 5:3)
x
rev(x)
a <- matrix(1:5, ncol = 3, nrow = 2)
a <- matrix(1:6, ncol = 3, nrow = 2)
a
x <- c(2.1, 4.2, 3.3, 5.4)
x
x[c(1, 3)]
x[order(X)]
x[order(x)]
x[-c(1, 3)]
x[x>3]
x[x>==3]
x[x==3]
x[x==3.3]
x[]
x[0]
y <- setNames(x, letters[1:4)
y <- setNames(x, letters[1:4])
y
x
mtcars[mtcars$cyl == 4]
mtcars[mtcars$cyl = 4]
View(mtcars)
mtcars[mtcars$cyl == 4]
View(mtcars)
table(mtcars$cyl)
mtcars[mtcars$cyl == 4, ]
mtcars[1:$]
mtcars[1:4]
mtcars[mtcars$cyl <= 4, ]
mtcars[mtcars$cyl <= 5, ]
mtcars[mtcars$cyl == c(4, 6), ]
mtcars[[1]]
mtcars[["cyl"]]
mod <- lm(mpg ~ wt, data = mtcars)
print(mod)
str(mod)
list(mod)
summary(mod)
str(summary(mod))
mod$r.squared
View(mod)
str(mod)
mo[$r.squared]
summary(mod)
str(summary(mod))
summary(mod$df.residual)
summary(mod$residuals)
(mod$residuals)
sum(mod$residuals)
sum(mod$residuals^2)
sampe(10)
sample(10)
sample(10) < 4
x <- sample(10) < 4
which(x)
x
sample(10)
qplot(cut, clarity, data = diamonds, stat = "sum", group = 1)
library(ggplot2)
qplot(cut, clarity, data = diamonds, stat = "sum", group = 1)
View(diamonds)
library(ramify)
x <-readClipboard()
dim(x)
d <- as.matrix(x)
matrix(x, 205, 8, byrow = TRUE)
matrix(x, 205, 8, byrow = TRUE)
x <-readClipboard()
1688/8
d <- as.matrix(x)
matrix(x, 211, 8, byrow = TRUE)
dc_schools <- matrix(x, 211, 8, byrow = TRUE)
dir()
getwd()
write.csv(dc_schools)
help(write.csv)
write.csv(dc_schools = dc_schools_2015)
write.csv(dc_schools, file = "dc_schools_2015")
write.csv(dc_schools, file = "dc_schools_2015.csv")
install.packages(c("ggmap", "ggplot2", "ggthemes"))
install.packages("knitr")
install.packages("rmarkdown")
---
title: "Untitled"
author: "Tim Essam, GeoCenter"
date: "December 27, 2015"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata13/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
```{r}
sysuse auto
summarize
reg price mpg
```
install.packages("rstudioapi", type = "source")
devtools::install_github("rstudio/addinexamples", type = "source")
library("ggmap", lib.loc="~/R/win-library/3.1")
library("ggbiplot", lib.loc="~/R/win-library/3.1")
library("ggthemes", lib.loc="~/R/win-library/3.1")
library("ggvis", lib.loc="~/R/win-library/3.1")
library("ggdendro", lib.loc="~/R/win-library/3.1")
install.packages(c("BH", "broom", "cairoDevice", "classInt", "coda", "coefplot", "curl", "Deducer", "DEoptimR", "devtools", "digest", "directlabels", "doBy", "doParallel", "dygraphs", "effects", "fields", "foreach", "geosphere", "ggmap", "ggthemes", "git2r", "gstat", "Hmisc", "httr", "irlba", "iterators", "jsonlite", "kernlab", "knitr", "latticeExtra", "lme4", "lubridate", "maps", "maptools", "Matrix", "mclust", "memoise", "metricsgraphics", "multcomp", "mvtnorm", "networkD3", "OpenStreetMap", "packrat", "pbkrtest", "pitchRx", "plm", "R.utils", "RandomFields", "RandomFieldsUtils", "randomForest", "raster", "rattle", "Rcpp", "RcppEigen", "rgdal", "rJava", "rmarkdown", "roxygen2", "rvest", "sp", "spacetime", "spam", "spdep", "splancs", "stringi", "testthat", "TH.data", "tidyr", "treemap", "useful", "viridis"))
addinexamples:::subsetAddin()
d <- mpg
data(mpg)
library(ggplot2)
d <- data(mpg)
# Trying ggplots new functionality based on the cheat sheet
d <- data(mpg)
ggplot(d, aes(hwy, cty)) + geom_point(aes(color = cyl)) +
geom_smooth(method = "lm") + coord_cartesian() +
scale_color_gradient() + theme_bw()
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(mpg, aes(hwy, cty)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") +
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
mpg
View(mpg)
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
devtools::install_github("hadley/ggplot2")
library(ggplot)
library(ggplot2)
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
install.packages("devtools")
devtools::install_github("hadley/ggplot2")
library(ggplot2)
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") + coord_cartesian() +
scale_color_gradient() +
theme_bw()
last_plot()
a + geom_area(stat = "bin")
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") + coord_cartesian() +
scale_color_gradient() +
theme_bw()
# Going through column one
a <- ggplot(mpg, aes(hwy))
a + geom_area(stat = "bin")
a + geom_density(kernel = "gaussian")
a + geom_dotplot()
a + geom_dotplot(color = cyl)
a + geom_dotplot(aes(color = cyl))
a + geom_dotplot(fill = "gray")
a + geom_dotplot(fill = "brown")
a + geom_dotplot(fill = "red")
a + geom_dotplot(fill = "red") + theme_bw
a + geom_dotplot(fill = "red") + theme_bw()
b <- ggplot(mpg, aes(fl))
b + geom_bar()
c + geom_polygon(aes(group = group))
c <- ggplot(map, aes(long, lat))
c + geom_polygon(aes(group = group))
c + geom_polygon(aes(group = group))
c <- ggplot(map, aes(long, lat))
data(map)
data("economics")
b + geom_bar() + geom_rug(sides = "brown")
a + geom_dotplot(fill = "red") + theme_bw() + geom_rug(sides = "brown")
f <- ggplot(mpg, aes(cty, hwy))
f + stat_bin2d(bins = 30, drop = TRUE)
install.packages("flexdashboard", type = "source")
data("iris")
head(iris)
str(iris)
library("dplyr")
glimpse(iris)
str(iris)
summary(iris)
class(iris)
class(iris$Sepal.Length)
sapply(iris, class)
?(sapply)
f = factor(c("a", "b", "a", "a", "c"))
levels(f)
gender = c(2, 1, 1, 2, 0, 1, 1)
gender = c(2, 1, 1, 2, 0, 1, 1)
recode = c(male = 1, female = 2)
gender = factor(gender, levels = recode, labels = names(recode))
levels(gender)
factor(gender)
gender = relevel(gender, ref = "female")
levels(gender)
attr(gender)
age = c(27, 52, 65, 34, 89, 45, 68)
factor(age)
factor(gender)
gender = reorder(gender, age)
(gender = reorder(gender, age))
(gender = factor(gender, levels = recode, labels = names(recode)))
gender = c(2, 1, 1, 2, 0, 1, 1)
recode = c(male = 1, female = 2)
(gender = factor(gender, levels = recode, labels = names(recode)))
age = c(27, 52, 65, 34, 89, 45, 68)
(gender = reorder(gender, age))
attr(, "Scores")
attr(, "scores")
gender = relevel(gender, ref = "female")
age = c(27, 52, 65, 34, 89, 45, 68)
(gender = reorder(gender, age))
attr(, "scores")
attr(iris, "dim")
attributes(iris)
person
iris
complete.cases(iris)
sum(complete.cases(iris))
sum(complete.cases(mtcars))
attributes(mtcars)
dim(mtcars)
dim(iris)
c = c(1:10, 20, 30)
boxplot.stats(c)$out
boxplot.stats(c)
boxplot.stats(c)out
boxplot.stats(c)$out
summary(c)
histogram(c)
hist(c)
library("editrules")
install.packages("editrules")
library(editrules)
install.packages("deducorrect")
library(purrr)
library(devtools)
devtools::install_github("hadley/purrr")
devtools::install_github("hadley/purrr")
install.packages("shiny")
runExample("01_hello")
library(shiny)
runExample("01_hello")
#=============================================================================================================#
# Script created by Tim Essam @ USAID GeoCenter
# Script created in version R 3.3.0
# This script is for analyzing Food for Peace Procurement Data
#=============================================================================================================#
# Import/Load packages ----------------------------------------------------
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr',
'lubridate','xtable', 'scales', 'zoo', 'knitr', 'formattable')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
setwd("~/Github/FoodForPeaceAnalysis/Datain")
# Read in food for peace procurement data
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`, commodity = Material,
prog = Program)
head(df)
glimpse(df)
kable(table(df$country))
(table(df$country)
)
(table(df$commodity))
df %>% group_by(country) %>% mutate(n = n()) %>% arrange(-n)
View(df)
df %>% group_by(country)
%>% summarise(n = n()) %>% arrange(-n)
df %>% group_by(country)
%>% summarise(count = n())
%>% arrange(-n)
df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-n)
group_by(df, country) %>%
summarise(count = n()) %>%
arrange(-n)
df %>% group_by(country) %>% summarise(count = n()) %>% arrange(-count)
kable(df %>% group_by(country) %>% summarise(count = n()) %>% arrange(-count))
df %>% mutate(df = ifelse(country == "SOUTH SUDAN", "REPUBLIC OF SOUTH SUDAN", country))
kable(df %>% group_by(country) %>% summarise(count = n()) %>% arrange(-count))
df %>% mutate(df = ifelse(country == "SOUTH SUDAN", "REPUBLIC OF SOUTH SUDAN", country))
#=============================================================================================================#
# Script created by Tim Essam @ USAID GeoCenter
# Script created in version R 3.3.0
# This script is for analyzing Food for Peace Procurement Data
#=============================================================================================================#
# Import/Load packages ----------------------------------------------------
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr',
'lubridate','xtable', 'scales', 'zoo', 'knitr', 'formattable')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
setwd("~/Github/FoodForPeaceAnalysis/Datain")
# Read in food for peace procurement data
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`, commodity = Material,
prog = Program)
head(df)
glimpse(df)
# Fix inconsistent country names for cleaner faceting
df %>% mutate(df = ifelse(country == "SOUTH SUDAN", "REPUBLIC OF SOUTH SUDAN", country))
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count))
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count))
df$country[df$country == "SOUTH SUDAN"] <- "REPUBLIC OF SOUTH SUDAN"
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count))
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count)) %>%
filter(%in% c("CONGO-DEM. REPUB. ", "CONGO-REPUB. OF "))
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count)) %>%
filter(df %in% c("CONGO-DEM. REPUB. ", "CONGO-REPUB. OF "))
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count) %>%
filter(%in% c("CONGO-DEM. REPUB. ", "CONGO-REPUB. OF ")))
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count) %>%
filter(df %in% c("CONGO-DEM. REPUB. ", "CONGO-REPUB. OF ")))
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count)) %>%
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count))
#=============================================================================================================#
# Script created by Tim Essam @ USAID GeoCenter
# Script created in version R 3.3.0
# This script is for analyzing Food for Peace Procurement Data
#=============================================================================================================#
# Import/Load packages ----------------------------------------------------
pkgs = c('dplyr', 'haven', 'tidyr', 'ggplot2', 'readxl', 'foreign', 'data.table', 'stringr',
'lubridate','xtable', 'scales', 'zoo', 'knitr', 'formattable')
# Check if packages are installed
alreadyInstalled = installed.packages()[, "Package"]
toInstall = pkgs[!pkgs %in% alreadyInstalled]
# Install anything that isn't already installed.
if (length(toInstall > 0)) {
print(paste0("Installing these packages: ", toInstall))
install.packages(toInstall)
}
# Load packages
for (i in seq_along(pkgs)) {
library(pkgs[i], character.only = TRUE, quietly = quiet)
}
setwd("~/Github/FoodForPeaceAnalysis/Datain")
# Read in food for peace procurement data
df <- tbl_df(read_excel("ffp_procurement.xlsx"))
df <- rename(df, date = `PO Date`, FY = `Fiscal Year`, mt = `Metric Tons`,
value = `PO Value`, salesid = `Sales Order`,
country = `Recipient Country`, dest = `Ship to`,
ip = `Sold To Party`, commodity = Material,
prog = Program)
head(df)
glimpse(df)
# Fix inconsistent country names for cleaner faceting
df$country[df$country == "SOUTH SUDAN"] <- "REPUBLIC OF SOUTH SUDAN"
kable(df %>% group_by(country) %>%
summarise(count = n()) %>%
arrange(-count))
